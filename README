# Search Engine
======================================================================================

## Описание

	Это проект по разработке поисковой системы. Он включает в себя функционал для построения индекса, поиска по запросам, и тестирования. Основные компоненты проекта:

	- `InvertedIndex`: Класс для создания и управления обратным индексом.
	- `SearchServer`: Класс для обработки поисковых запросов.
	- `ThreadPool`: Класс для многопоточной обработки задач.
	- `ConverterJSON`: Класс для работы с JSON.

======================================================================================

## Структура проекта

search_engine/  
	├── CMakeLists.txt 
	├── README.md 
	└── src/ 
		├── CMakeLists.txt 
		├── ConverterJSON.cpp 
		├── InvertedIndex.cpp 
		├── SearchServer.cpp 
		├── ThreadPool.cpp 
		├── main.cpp 
		└── test.cpp
	├── include/
		├── ConverterJSON.h 
		├── InvertedIndex.h 
		├── SearchServer.h  
		└── ThreadPool.h

 
======================================================================================

## Зависимости

Проект использует следующие внешние библиотеки:

	- **nlohmann_json** для работы с JSON.
	- **Google Test** для написания и выполнения тестов.

Обе библиотеки загружаются и управляются через CMake с использованием FetchContent. 
Это позволяет автоматически загружать, компилировать и связывать эти библиотеки при сборке проекта.

======================================================================================

## Установка

	### Предварительные требования

	- CMake версии 3.17 и выше
	- Компилятор, поддерживающий C++17

	### Шаги по установке

		1. Склонируйте репозиторий:

    			```bash
    			git clone git@github.com:KharlanovIvan/search-engine.git
    			cd search_engine
    			```

			2. Создайте директорию для сборки и перейдите в неё:

    			```bash
    			mkdir build
    			cd build
    			```

		3. Выполните CMake для генерации файлов сборки:

    			```bash
    			cmake ..
    			```

		4. Соберите проект:

    			```bash
    			cmake --build .
    			```

======================================================================================

##Тестовые ресурсы

В репозитории также включены тестовые ресурсы, которые необходимы для выполнения тестов. Эти ресурсы расположены в папке resources и включают:

	Текстовые документальные ресурсы: Эти файлы используются для поиска и анализа. Они находятся в каталоге resources.

	config.json: Конфигурационный файл, содержащий пути к тестовым ресурсным текстовым файлам. При сборке проекта этот файл автоматически копируется в каталог с исполняемыми файлами.

	requests.json: Файл с тестовыми запросами. При сборке проекта этот файл также автоматически копируется в каталог с исполняемыми файлами. Необходимо добавить или изменить запросы для корректного выполнения тестов.

Как использовать тестовые ресурсы
	В каталоге resources находятся тестовые текстовые файлы. Убедитесь, что все необходимые файлы присутствуют в этой папке.
	Откройте файл config.json, который будет автоматически скопирован в каталог с исполняемыми файлами, и укажите правильные пути к вашим тестовым ресурсным файлам в соответствующих полях.
	Проверьте файл requests.json, который также будет автоматически скопирован в каталог с исполняемыми файлами, и добавьте свои тестовые запросы при необходимости.
	Эти файлы необходимы для корректного выполнения тестов и работы с проектом. Убедитесь, что они настроены правильно, чтобы тесты выполнялись без ошибок.

======================================================================================

## Использование

	Для запуска основного приложения:

	```bash
	./bin/search_engine

	Приложение будет выполнять задачи по индексации и поиску. В main.cpp содержится основной код приложения.
	Результаты поиска будут сохранены в файл answers.json

======================================================================================

## Тестирование
	Чтобы выполнить тесты, выполните команду:
		```bash
		./bin/tests

	Тесты используют Google Test для проверки функциональности компонентов.

======================================================================================

## Компоненты
	InvertedIndex
	Создает и управляет обратным индексом для быстрого поиска по документам.

	SearchServer
	Обрабатывает поисковые запросы и возвращает результаты на основе обратного индекса.

	ThreadPool
	Реализует пул потоков для многопоточной обработки задач.

	ConverterJSON
	Работает с JSON для преобразования данных в и из JSON-формата.
======================================================================================

## Контрибьюция
Если вы хотите внести свой вклад в проект, пожалуйста, создайте запрос на слияние или свяжитесь с автором.

======================================================================================

## Лицензия
Этот проект ещё не лицензирован. Пожалуйста, свяжитесь с автором для получения разрешения на использование или распространение.

======================================================================================

## Об авторе
Проект разработан в рамках учебных целей. Если у вас есть вопросы или предложения, вы можете связаться со мной по kharlanov.ivan.a@yandex.ru

======================================================================================

## Авторы
Харланов Иван Анатольевич - разработчик основного кода

